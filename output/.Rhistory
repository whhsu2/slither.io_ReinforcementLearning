file <- read_csv("fps10_features6_dir12.csv",col_names=T)
file <- read_csv("fps10_features6_dir12.csv")
file <- read.csv("fps10_features6_dir12.csv")
file <- read.csv("fps10_features6_dir12.csv")
file
file <- read.csv("fps10_features6_dir12.csv")
file[1]
file <- read.csv("fps10_features6_dir12.csv")
file[2]
file <- read.csv("fps10_features6_dir12.csv")
file <- read.csv("fps10_features6_dir12.csv")
file
file %>%
ggplot(aes(x = file[1], y = file[2])) %>%
geam_line()
library(tidyverse)
library(ggplot2)
file %>%
ggplot(aes(x = file[1], y = file[2])) %>%
geam_line()
file %>%
ggplot(aes(x = file[1], y = file[2])) %>%
geom_line()
file %>%
ggplot(aes(x = file[1], y = file[2])) +
geom_line()
ggplot(aes(x = file[1], y = file[2])) +
geom_line()
file <- data.frame(file)
ggplot(aes(x = file[1], y = file[2])) +
geom_line()
file <- read.csv("fps10_features6_dir12.csv")
type(file)
file <- read.csv("fps10_features6_dir12.csv")
file <- data.frame(file)
file <- read.csv("fps10_features6_dir12.csv")
file <- data.frame(file)
file
file %>%
ggplot(aes(x = file[1], y = file[2])) +
geom_line()
reward <- file[2]
episode <- file[1]
ggplot(aes(x = episode, y = reward)) +
geom_line()
reward <- file[2]
episode <- file[1]
file %>%
ggplot(aes(x = episode, y = reward)) +
geom_line()
reward <- file[2]
episode <- file[1]
file %>%
ggplot(aes(x = file[1], y = file[2])) +
geom_line()
file <- read.csv("fps10_features6_dir12.csv")
file <- data.frame(file)
colnames(file)[1] <- "episode"
colnames(file)[2] <- "reward"
file
reward <- file[2]
episode <- file[1]
file %>%
ggplot(aes(x = episode, y = reward)) +
geom_line()
library(readr)
library(tidyverse)
library(ggplot2)
library(usmap)
library(RColorBrewer)
library(stringr)
file <- read_csv("RegionalInterestByConditionOverTime.csv",col_names=T)
SearchData <- file %>%
select(-c("dma", "geoCode")) %>%  #delete useless columns
aggregate(.~state, ., mean)   #aggregate areas in the same state by means
Search <- SearchData %>%
gather(., typeyear, value, -state) %>%
separate(typeyear, c("year", "type"))  #change wide data into long data
head(Search)
cancer <- read.csv("cancer.csv")
cardio <- read.csv("cardiovascular.csv")
depres <- read.csv("depression.csv")
diabet <- read.csv("diabetes.csv")
obese <- read.csv("obese.csv")
cardio <- cardio %>%
mutate(Topic=rep("cardiovascular", nrow(cardio))) #change original disease type "cardiovascular disease" into "cardiovascular"
cancer <- cbind(cancer[,1:3], Topic=rep("cancer", nrow(cancer)), cancer[,4:8]) #add type column to cancer so that data sets can be wrangled together
prevalence <- rbind(cancer, cardio, depres, diabet) %>%
select(Year, Locationabbr, Topic, value) %>%
rename(year=Year, state=Locationabbr, type=Topic) #keep the prevalence data set in the same form as the Search data set
obese <- obese %>%
select(Year, Locationabbr, Topic, Data_value) %>%
rename(year=Year, state=Locationabbr, type=Topic, value=Data_value)%>%
mutate(type=rep("obesity", nrow(obese))) #change obesity data into the same form
prevalence <- rbind(prevalence, obese) #conbime all the data
head(prevalence)
nationplot<-Search %>%
mutate(year=as.numeric(year)) %>%
group_by(state, year) %>%
summarise(total=sum(value)) %>%
ggplot(aes(year, total, color=state)) + #for each year, we sum every state's total search for all diseases
geom_line() +
theme(legend.position="none") +
xlab("Year") +
ylab("Search") +
ggtitle("Google Health Search Trend by State")
nationplot
diseaseplot<-Search %>%
mutate(year=as.numeric(year)) %>%
group_by(type, year) %>%
summarise(total=sum(value)) %>%
ggplot(aes(year, total, color=type)) + #for each year, we sum every disease's total search from all states
geom_line()+
xlab("Year") +
ylab("Search") +
ggtitle("Google Health Search Trend by Disease")
diseaseplot
stateplot<-Search %>%
mutate(year=as.numeric(year)) %>%
filter(state=="CA") %>%
group_by(type) %>%
ggplot(aes(year, value, color=type)) + #for California, we plot it's search tread for every disease)
geom_line()+
xlab("Year") +
ylab("Search") +
ggtitle("Google Health Search Trend_California")
stateplot #we also try to plot the search trend for a single state
knitr::include_graphics(c("2016_diabetes.png", "2017_Diabetes.png"))
knitr::include_graphics(c("2016_cancer.png", "2016_cardiovascular.png","2016_depression.png", "2016_diabetes.png","2016_diarrhea.png", "2016_obesity.png","2016_rehab.png", "2016_stroke.png","2016_vaccine.png"))
knitr::include_graphics(c("2017_cancer.png", "2017_cardiovascular.png","2017_Depression.png", "2017_Diabetes.png", "2017_obesity.png"))
knitr::include_graphics(c("2016_diabetes.png","2017_Diabetes.png", "2016_cancer.png", "2017_cancer.png"))
Search2010 <- Search %>%
filter(year>=2010&year<=2016)%>%
filter(type %in% c("cancer", "cardiovascular", "depression", "diabetes", "obesity")) #select data from Search data set matching on year and type with the prevalence data.
prevalence <- prevalence[!duplicated(prevalence),] #delete repeated data in prevalence dataset.
prevalence_1 <- prevalence %>%
mutate(year=year-1) %>% #As we try to predict the next year's prevalence, we minus the year in prevalence data set by 1 so that it can match with the search dataset. But we should know that prevalence means next year's prevalence in later analysis.
filter(state %in% unique(Search2010$state))
Data <- Search2010 %>%
mutate(pre=prevalence_1$value, year=as.numeric(year)) #combine the 2 data sets.
head(Data)
library("randomForest")
rFM1 <- randomForest(pre~value, data=Data[which(Data$type=="cancer"),], strata=as.factor(year), ntree=1000, importance=T, na.action=na.omit)
p1 <- predict(rFM1, Data[which(Data$type=="cancer"),])
mean((Data[which(Data$type=="cancer"),]$pre-p1)^2)
rFM2 <- randomForest(pre~value, data=Data[which(Data$type=="cardiovascular"),], strata=as.factor(year), ntree=1000, importance=T, na.action=na.omit)
p2 <- predict(rFM2, Data[which(Data$type=="cardiovascular"),])
mean((Data[which(Data$type=="cardiovascular"),]$pre-p2)^2)
rFM3 <- randomForest(pre~value, data=Data[which(Data$type=="depression"),], strata=as.factor(year), ntree=1000, importance=T, na.action=na.omit)
p3 <- predict(rFM3, Data[which(Data$type=="depression"),])
mean((Data[which(Data$type=="depression"),]$pre-p3)^2)
rFM4 <- randomForest(pre~value, data=Data[which(Data$type=="diabetes"),], strata=as.factor(year), ntree=1000, importance=T, na.action=na.omit)
p4 <- predict(rFM4, Data[which(Data$type=="diabetes"),])
mean((Data[which(Data$type=="diabetes"),]$pre-p4)^2)
rFM5 <- randomForest(pre~value, data=Data[which(Data$type=="obesity"),], strata=as.factor(year), ntree=1000, importance=T, na.action=na.omit)
p5 <- predict(rFM5, Data[which(Data$type=="obesity"),])
mean((Data[which(Data$type=="obesity"),]$pre-p5)^2)
obj <- function(w, wfit=wfit, test=test){
plm <- predict(wfit, data.frame(value=test$value), weights = w)
return(mean((w*test$pre-plm)^2))
}
model <- function(disease){
library(tidyverse)
Data0 <- Data %>%
filter(type==disease)
yr <- unique(Data$year)
st <- unique(Data$state)
W <- NULL
w <- rep(1/sqrt(length(st)), length(st))
W <- w
MSE <- NULL
w.old <- w
for(i in 1:(length(yr)-1)){
train <- Data0 %>%
filter(year==yr[i])
test <- Data0 %>%
filter(year==yr[i+1])
wfit <- lm(pre~value, train, weights=w.old)
w.new <- optim(w.old, fn=obj, lower=rep(0.01,15), method="L-BFGS-B", wfit=wfit, test=test)
new <- w.new$par/sqrt(sum(w.new$par^2))
W <- cbind(W, new)
w.old <- new
MSE <- c(MSE, w.new$value)
}
Wfit <- lm(pre~value, test, weights=new)
return(list(name=disease, Data=Data0, WMatrix=W, MSE=MSE, model=Wfit))
}
Cancer <- model("cancer")
Cardio <- model("cardiovascular")
Diabet <- model("diabetes")
Depres <- model("depression")
Obese <- model("obesity")
st <- unique(Data$state)
Weight <- function(X){
library("tidyverse")
library("ggrepel")
WMatrix <- data.frame(st, X$WMatrix)
names(WMatrix) <- c("state", 2010:2016)
plotdata <- as.data.frame(WMatrix) %>%
gather(., year, weight, -state) %>%
mutate(year=as.numeric(year))
top <- plotdata %>%
filter(year==2016) %>%
arrange(desc(weight))
png(file=paste0(X$name, "Weight", ".png"))
p1 <- plotdata %>% ggplot(aes(x=year, y=weight, color=state)) +
geom_line()+
theme(plot.title = element_text(hjust = 0.5, size=12))+
labs(title = paste("Weight for Each State in", X$name, "Model"))+
annotate("text", x=rep(2016,5)+c(0,0.1,0.1,0,-0.1), y=top$weight[1:5]+c(0,0.002,0.001,0,-0.001), label=top$state[1:5])
print(p1)
dev.off()
png(file=paste0(X$name, "Model", ".png"))
Wfit <- X$model
Data <- X$Data
weight <- WMatrix[,7]
plotdata1 <- Data%>%
filter(year==2016)
p2 <- plotdata1 %>% ggplot(aes(x=value, y=pre, label=state))+
geom_point()+
geom_abline(slope=coefficients(Wfit)[2], intercept=coefficients(Wfit)[1], col=2)+
theme(plot.title = element_text(hjust = 0.5, size=24))+
labs(title = paste(X$name))+
xlab("Search") + ylab("Prevalence")+
geom_text_repel()
print(p2)
dev.off()
}
Weight(Obese)
Weight(Cancer)
Weight(Diabet)
Weight(Depres)
Weight(Cardio)
knitr::include_graphics(c("cancerWeight.png", "cardiovascularWeight.png", "depressionWeight.png", "diabetesWeight.png", "obesityWeight.png"))
knitr::include_graphics(c("cancerModel.png", "cardiovascularModel.png", "depressionModel.png", "diabetesModel.png", "obesityModel.png"))
